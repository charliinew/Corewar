name: Chocolatine Workflow

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: ${{ vars.MIRROR_URL }}
  EXECUTABLES : ${{ vars.EXECUTABLES }}

jobs:
  
  check_coding_style:
         runs-on: ubuntu-latest
         container: ghcr.io/epitech/coding-style-checker:latest
         if: vars.MIRROR_URL != null || vars.MIRROR_URL != ''
         steps:
           - name: Checkout GH repository
             uses: actions/checkout@master
             with:
               repository: ''
           - name: Run coding-style checker
             run: check.sh . /tmp
           - name: Create annotation for coding-style errors
             run: |
              input="/tmp/coding-style-reports.log"        
              while IFS= read -r line; do
                fields=($(printf "%s" "$line"|cut -d':' --output-delimiter=' ' -f1-))
                if [ ${#fields[@]} -ne 4 ]; then
                  echo "Error: Unexpected number of fields in line: $line"
                  continue
                fi
                if [ -z "${fields[0]}" ] || [ -z "${fields[1]}" ] || [ -z "${fields[2]}" ] || [ -z "${fields[3]}" ]; then
                  echo "Error: Missing data in fields array: ${fields[@]}"
                  continue
                fi
                echo "::error file=${fields[0]},line=${fields[1]}::${fields[3]}"
              done < "$input"
           - name: Report banana result
             run: |
               NB_ERROR=$(cat /tmp/coding-style-reports.log | wc -l)
               if [ $NB_ERROR -gt 0 ]; then
                 exit 1
               fi

  check_program_compilation:
    runs-on: ubuntu-latest
    name: Check Program Compilation
    container: epitechcontent/epitest-docker:latest
    needs: check_coding_style
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: compile project
        run: make
        timeout-minutes: 2

      - name: clear project
        run: make clean

      - name: Verify Executables
        run: |
          IFS=',' read -ra EXECS <<< "$EXECUTABLES"
          for EXEC in "${EXECS[@]}"; do
            if [ ! -x "$EXEC" ]; then
              echo "Executable $EXEC not found or not executable!"
              exit 1
            fi
          done

  run_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    needs: check_program_compilation
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Make Tests Run
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: Push to Mirror Repository
    runs-on: ubuntu-latest
    needs: run_tests
    if: github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Push to Mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
          target_repo_url: ${{ env.MIRROR_URL }}